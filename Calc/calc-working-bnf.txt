To eliminate left recursion:

  < A > ::= < A > a1 | < A > a2 | ... | < A > an | < B >
  
  < A > ::= < B > < A' >
  < A' > ::= a1 < A' > | a2 < A' > | ... | an < A' > | ""

Parser
======
< Program >    ::= < Statement > < Program' >

< Program' >   ::= < Statement > < Program' >
                   | ""
                
< Statement >  ::= < Expression > NEWLINE

< Expression > ::= < Term > < Expression' >

< Expression' > ::= PLUS < Term > < Expression' >
                    | MINUS < Term > < Expression' >
                    | ""
                   
< Term >       ::= < Factor > < Term' >

< Term' >      ::=  TIMES < Factor > < Term' >
                  | DIVIDE < Factor > < Term' >
                  | MOD < Factor > < Term' >
                  | ""
                  
< Factor >       ::= < Base > < Factor' >

< Factor' >      ::= POW < Factor >
                     | ""

< Base >         ::= LPAREN < Expression > RPAREN
                     | MINUS < Expression >
                     | < Number >

< Number >       ::= INTLIT
                     | REALLIT


Lexer
=====
NEWLINE      \n
PLUS         +
MINUS        -
TIMES        *
DIVIDE       /
MOD          MOD
POW          ^
LPAREN       (
RPAREN       )
INTLIT       [0-9]+
REALLIT      INTLIT.INTLIT

Common Hidden Tokens
====================
EOI          End of input
INVALID      Everything not matched

- In most languages, we ignore whitespace unless it appears in the grammar