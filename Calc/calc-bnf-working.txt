To eliminate left recursion
  < A > ::= < A > a1 | < A > a2 | ... | < A > an | < B >

  replace:

  < A > ::= < B > < A' >

  < A' > ::= a1 < A' > | a2 < A' > | ... | < A > an | ""
  
Parser (Context-Free)
=========================================
< Program > ::= < Statement > < Program' >

< Program' > ::=  < Statement > < Program' > 
                  | ""

< Statement >    ::= < Statement-Body > NEWLINE
< Statement-Body > ::= < Ref > < Statement' > 
                     | < IO-Operation > 
                     | < Record-Decl > 
                     | < Branch >
                     | < Loop >
                     | < Function-Def >
                     | < Expression > 
                     | ""

< Statement' >   ::= EQUAL < Statement'' > 
                     | < Factor' > < Term' > < Expression' >

< Statement'' >  ::= < Expression > 
                     | < Record-Inst >
                     
< Record-Inst >  ::= NEW ID

< IO-Operation > ::= DISPLAY < Expression >
                     | INPUT ID
                     
< Record-Decl >  ::= RECORD ID NEWLINE < Field-List > END RECORD

< Field-List >   ::= < Field-List > < Field >
                     | < Field >

< Field >        ::= FIELD ID NEWLINE

< Branch >       ::= IF < Condition > NEWLINE < Program > END IF

< Loop >         ::= WHILE < Condition > NEWLINE < Program > END WHILE


< Function-Def > ::= FUN ID LPAREN < Param-List > RPAREN NEWLINE < Program > END FUN

< Param-List >   ::= < NV-Param-List >
                     | ""

< NV-Param-List > ::= < NV-Param-List > COMMA ID
                      | ID

< Condition >    ::= < Expression > < Condition' >

< Condition' >   ::= EQUAL < Expression >
                     | NE < Expression >
                     | LT  < Expression >
                     | GT  < Expression >
                     | LTE  < Expression >
                     | GTE  < Expression >
                     
< Expression >   ::= < Term > < Expression' >

< Expression' >  ::= PLUS < Term > < Expression' >
                     | MINUS < Term > < Expression' >
                     | ""
                   
< Term >         ::= < Factor > < Term' >

< Term' >        ::= TIMES < Factor > < Term' >
                     | DIVIDE < Factor > < Term' >
                     | MOD < Factor > < Term' >
                     | ""

< Factor >       ::= < Base > < Factor' >

< Factor' >      ::= POW < Factor > 
                     | ""

< Base >         ::= LPAREN < Expression > RPAREN
                     | MINUS < Expression >
                     | < Number >

< Number >       ::= INTLIT | REALLIT | < Ref >

< Ref >          ::= ID < Ref' >

< Ref' >         ::= DOT ID < Ref' >
                     | LPAREN < Arg-List > RPAREN
                     | ""
                     
< Arg-List >      ::= < NV-Arg-List > 
                      | ""

< NV-Arg-List >   ::= < NV-Arg-List > COMMA < Expression > 
                      | < Expression >


Lexer (Regular)
===============
NEWLINE        \n
PLUS           +
MINUS          -
TIMES          *
DIVIDE         /
MOD            MOD
POW            ^
LPAREN         (
RPAREN         )
INTLIT         [0-9]+
REALLIT        INTLIT.INTLIT
EQUAL          =
DISPLAY        display
INPUT          input
ID             (_ | [a-zA-Z]) (_|[a-zA-Z]|[0-9])*
DOT            .
NEW            new
RECORD         record
END            end
FIELD          field
IF             if
WHILE          while
NE             <>
LT             <
GT             >
LTE            <=
GTE            >=
FUN            fun
COMMA          ,

Hidden/Utilitiy Tokens
======================
EOI            End of Input
INVALID        Anything that doesn't match